# This workflow is designed to automate the process of building a release AAB for the 'prod' flavor
# of a Flutter application and distributing it to Firebase App Distribution.
name: Build Android Prod

on:
  # Workflow is triggered manually through the GitHub Actions interface.
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest

    steps:
      # Checkouts the repository with entire commit history, which is needed to calculate the
      # correct build version code in 'Setup environment' step.
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Setups Java, Flutter and correct version code before build.
      - name: Setup environment
        uses: ./.github/actions/setup

      # Injects Android keystore file and its associated properties into project before build.
      # File and properties are stored in GitHub secrets in Base64.
      - name: Decode and inject keystore
        env:
          KEYSTORE_FILE: ${{ secrets.ANDROID_PROD_KEYSTORE_FILE_BASE64 }}
          KEYSTORE_PROPERTIES: ${{ secrets.ANDROID_PROD_KEYSTORE_PROPERTIES_BASE64 }}
        run: |
          echo $KEYSTORE_FILE | base64 --decode > android/keystore/zob_store_keystore.jks
          echo $KEYSTORE_PROPERTIES | base64 --decode > android/keystore/zob_keystore.properties

      # Builds a release AAB for the 'prod' flavor. Used for manual upload to Google Play.
      - name: Build Android AAB
        run: flutter build appbundle --release --flavor prod

      # Builds a release APK for the 'prod' flavor. Used for Firebase App Distribution.
      - name: Build Android APK
        run: flutter build apk --release --flavor prod

      # Removes previously injected Android keystore file and its associated properties.
      - name: Remove keystore files
        run: |
          rm android/keystore/zob_store_keystore.jks
          rm android/keystore/zob_keystore.properties

      # Uploads Android related artifacts (AAB and mappings) from build to GitHub Actions.
      - name: Upload artifacts
        uses: ./.github/actions/artifacts-android

  # Use a new job, which runs on Linux, because Firebase App Distribution action does not support MacOS runner.
  distribute:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # Checkouts the repository.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Downloads Android related artifacts.
      - name: Download artifacts
        uses: actions/download-artifact@v4

      # Upload APK to the Firebase and distribute it with latest release notes.
      - name: Distribute to Firebase App Distribution
        uses: ./.github/actions/distribute
        with:
          serviceCredentials: ${{ secrets.FIREBASE_APP_DISTRIBUTION_PROD_CREDENTIAL_FILE_CONTENT }}
          path: 'android-artifacts/build/app/outputs/flutter-apk/app-prod-release.apk'
          application: ${{ secrets.FIREBASE_APP_DISTRIBUTION_ANDROID_PROD_APP_ID }}
          groups: ${{ vars.FIREBASE_APP_DISTRIBUTION_GROUPS }}
